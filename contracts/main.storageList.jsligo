#include "./main.jsligo" 

const default_storage = {
    memberProfileVerified : Set.literal(list(["tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address])) as set<address>,
    tezosOrganization : 
    {
      name : "TEZOS",
      business : "Save the planet",
      siteUrl : "https://tezos.com",
      logoUrl : "https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Tezos_logo.svg/langfr-220px-Tezos_logo.svg.png",
      ipfsNftUrl : "ipfs://QmdHrYEHaaDQBXVF7vZJXudLgeMaeoiPE4UuGapMNe25ej",
      members : Big_map.empty as big_map<address,unit>,
      admins : Set.literal(list(["tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address])) as set<address>,
      status : ACTIVE(),
      memberRequests : Set.empty as set<joinOrganizationRequest>,
      verified : true
    },
    organizations : list([]) as list<organization>,
    organizationMax : 100 as nat,
    adminsMax : 50 as nat,

    ledger: Big_map.literal(list([[("tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address),1 as nat]])) as SINGLEASSET.Ledger.t,
    metadata : Big_map.literal(list([["",  bytes `tezos-storage:data`],["data", bytes  `{
      "name":"Tezos Community NFT",
      "description":"Membership card for Tezos community member",
      "version":"0.0.1",
      "license":{"name":"MIT"},
      "authors":["Marigold<contact@marigold.dev>"],
      "homepage":"https://marigold.dev",
      "source":{
        "tools":["Ligo"],
        "location":"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"},
      "interfaces":["TZIP-012"],
      "errors": [],
      "views": []
      }`
    ]])),
    token_metadata: Big_map.add(0 as nat, {token_id: 0 as nat,token_info:  Map.literal(list([
      ["name", (bytes `Tezos Community`)],
      ["description",(bytes `Membership card for Tezos community member`)],
      ["interfaces", (bytes `["TZIP-12"]`)],
      ["thumbnailUri", (bytes`ipfs://QmdHrYEHaaDQBXVF7vZJXudLgeMaeoiPE4UuGapMNe25ej`)],
      ["symbol",(bytes`NFTTZ`)],
      ["decimals", (bytes `0`)]
     ])) as map<string, bytes>
    
    
    },Big_map.empty as SINGLEASSET.TokenMetadata.t),
    operators: Big_map.empty as SINGLEASSET.Operators.t,
    owners: Set.add("tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address,Set.empty as set<address>)
};


