#import "./main.jsligo" "CONTRACT"

#import "./nft.jsligo" "NFT"

const _ = Test.reset_state(4 as nat, list([]) as list<tez>);

const baker = Test.nth_bootstrap_account(0);

const _14 = Test.set_baker(baker);

const tezosAdmin: address = Test.nth_bootstrap_account(1);

const _13 = Test.log("tezosAdmin has balance : ");

const _12 = Test.log(Test.get_balance(tezosAdmin));

const _11 = Test.log(tezosAdmin);

const user: address = Test.nth_bootstrap_account(2);

const _10 = Test.log("user has balance : ");

const _9 = Test.log(Test.get_balance(user));

const _8 = Test.log(user);

const user2: address = Test.nth_bootstrap_account(3);

const _7 = Test.log("user2 has balance : ");

const _6 = Test.log(Test.get_balance(user2));

const _5 = Test.log(user2);

const tezosOrganization: CONTRACT.organization = {
  name: "TEZOS",
  business: "Save the planet",
  siteUrl: "https://tezos.com",
  logoUrl: "https://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Tezos_logo.svg/langfr-220px-Tezos_logo.svg.png",
  ipfsNftUrl: "ipfs://QmdHrYEHaaDQBXVF7vZJXudLgeMaeoiPE4UuGapMNe25ej",
  members: Big_map.empty as big_map<address, unit>,
  admins: Set.literal(list([tezosAdmin])) as set<address>,
  status: Active(),
  memberRequests: Set.empty as set<CONTRACT.joinOrganizationRequest>,
  fundingAddress: None() as option<address>,
  autoRegistration: false
};

const token_info: map<string, bytes> =
  Map.literal(
    list(
      [
        ["name", (bytes `Tezos Community`)],
        ["description", (bytes `Membership card for Tezos community member`)],
        ["interfaces", (bytes `["TZIP-12"]`)],
        [
          "thumbnailUri",
          (bytes `ipfs://QmfPwhXDYyR8HCXyCpxYm4xfi2HcDozc84mQdnoG5sbPM4`)
        ],
        ["symbol", (bytes `NFTTZ`)],
        ["decimals", (bytes `0`)]
      ]
    )
  ) as map<string, bytes>;

const metadata: bytes =
  bytes
  `{
      "name":"Tezos Community NFT",
      "description":"Membership card for Tezos community member",
      "version":"0.0.1",
      "license":{"name":"MIT"},
      "authors":["Marigold<contact@marigold.dev>"],
      "homepage":"https://marigold.dev",
      "source":{
        "tools":["Ligo"],
        "location":"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"},
      "interfaces":["TZIP-012"],
      "errors": [],
      "views": []
      }`;

const initial_storageNFT: NFT.storage = {
  ledger: Big_map.literal(list([[[tezosAdmin, 0 as nat], 1 as nat]])) as
    NFT.MULTIASSET.Ledger.t,
  metadata: Big_map.literal(
    list([["", bytes `tezos-storage:data`], ["data", metadata]])
  ),
  token_metadata: Big_map.add(
    0 as nat,
    { token_id: 0 as nat, token_info: token_info },
    Big_map.empty as NFT.MULTIASSET.TokenMetadata.t
  ),
  operators: Big_map.empty as NFT.MULTIASSET.Operators.t,
  owner_token_ids: Set.add(
    [tezosAdmin, 0 as nat],
    Set.empty as set<[NFT.MULTIASSET.owner, NFT.MULTIASSET.token_id]>
  ),
  token_ids: Set.add(0 as nat, Set.empty as set<NFT.MULTIASSET.token_id>)
};

const [taddrNFT, _3, _4] =
  Test.originate_module(contract_of(NFT), initial_storageNFT, 0 as tez);

const contrNFT = Test.to_contract(taddrNFT);

const initial_storage: CONTRACT.storage = {
  tezosOrganization: tezosOrganization,
  organizations: list([]) as list<CONTRACT.organization>,
  limits: {
    organizationMax: 1000 as nat,
    adminsMax: 50 as nat,
    memberRequestMax: 50 as nat
  },
  nftAddress: Tezos.address(contrNFT)
};

const [taddr, _1, _2] =
  Test.originate_module(contract_of(CONTRACT), initial_storage, 0 as tez);

const contr = Test.to_contract(taddr);

const _testClaimNFT = (sender: address, ledgerSize: nat): bool => {
  Test.set_source(sender);
  const status =
    Test.transfer_to_contract(contrNFT, CreateNFTCardForMember(), 0 as mutez);
  const _ = Test.log(["status", status]);
  let store: NFT.storage = Test.get_storage(taddrNFT);
  Test.log(store);
  Test.assert_with_error(
    Set.cardinal(store.owner_token_ids) == ledgerSize,
    "Wrong size on ledger"
  );
  const ownerTokenIds: set<[NFT.MULTIASSET.owner, NFT.MULTIASSET.token_id]> =
    Set.filter_map(
      (tupleItem: [NFT.MULTIASSET.owner, NFT.MULTIASSET.token_id]) =>
        tupleItem[0] == sender ? Some(tupleItem) : None(),
      store.owner_token_ids
    );
  Test.assert_with_error(
    Set.cardinal(ownerTokenIds) == (1 as nat),
    "Cannot find the user_token on the tuple"
  );
  return true
};

const _testAddOrganizationNotAdmin = (
  sender: address,
  or: CONTRACT.addOrganizationRequest,
  orgSize: nat,
  status: CONTRACT.organizationStatus
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(contr, AddOrganization(or), 0 as mutez);
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  Test.assert_with_error(
    List.size(store.organizations) == orgSize,
    "Wrong size on organization list"
  );
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == or.name ? Some(orgItem) : None(),
      store.organizations
    );
  Test.assert_with_error(
    List.size(orgList) == (1 as nat),
    "Cannot find the organization on the list"
  );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.assert_with_error(org.name == or.name, "organization name is different");
  Test.assert_with_error(
    org.status == status,
    "organization status is different"
  );
  const events =
    Test.get_last_events_from(taddr, "organizationAdded") as list<string>;
  Test.assert_with_error(List.size(events) == (1 as nat), "Cannot find event");
  Test.assert_with_error(
    Option.unopt(List.head_opt(events)) == org.name,
    "Event is different"
  );
  return true
};

const _testUpdateOrganization = (
  sender: address,
  or: CONTRACT.updateOrganizationParameters,
  orgSize: nat,
  status: CONTRACT.organizationStatus
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(contr, UpdateOrganization(or), 0 as mutez);
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  Test.assert_with_error(
    List.size(store.organizations) == orgSize,
    "Wrong size on organization list"
  );
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == or.name ? Some(orgItem) : None(),
      store.organizations
    );
  Test.assert_with_error(
    List.size(orgList) == (1 as nat),
    "Cannot find the organization on the list"
  );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.assert_with_error(org.name == or.name, "organization name is different");
  Test.assert_with_error(
    org.status == status,
    "organization status is different"
  );
  return true
};

const _testUpdateTezosOrganizationToFail = (
  sender: address,
  or: CONTRACT.updateOrganizationParameters,
  orgSize: nat,
  status: CONTRACT.organizationStatus
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(contr, UpdateOrganization(or), 0 as mutez);
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  return match(transferStatus) {
    when (Fail(_)):
      true
    when (Success(_)):
      false
  }
};

const _testActivateOrganization = (
  sender: address,
  organizationName: string,
  orgSize: nat,
  status: CONTRACT.organizationStatus
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(
      contr,
      ActivateOrganization(organizationName),
      0 as mutez
    );
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  Test.assert_with_error(
    List.size(store.organizations) == orgSize,
    "Wrong size on organization list"
  );
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == organizationName ? Some(orgItem) : None(),
      store.organizations
    );
  Test.assert_with_error(
    List.size(orgList) == (1 as nat),
    "Cannot find the organization on the list"
  );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.assert_with_error(
    org.name == organizationName,
    "organization name is different"
  );
  Test.assert_with_error(
    org.status == status,
    "organization status is different"
  );
  return true
};

const _testRequestToJoinOrganization = (
  sender: address,
  userJoinRequest: CONTRACT.joinRequest,
  memberRequestsSize: nat
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(
      contr,
      RequestToJoinOrganization(userJoinRequest),
      0 as mutez
    );
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == userJoinRequest.orgName ? Some(orgItem) : None(),
      store.organizations
    );
  Test.assert_with_error(
    List.size(orgList) == (1 as nat),
    "Cannot find the organization on the list"
  );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.assert_with_error(
    Set.cardinal(org.memberRequests) == memberRequestsSize,
    "memberRequests size is different"
  );
  return true
};

const _testResponseToJoinOrganization = (
  sender: address,
  member: address,
  userJoinOrganizationResponse: CONTRACT.joinOrganizationResponse,
  memberRequestsSize: nat,
  shouldFindMember: bool
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(
      contr,
      ResponseToJoinOrganization(userJoinOrganizationResponse),
      0 as mutez
    );
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == userJoinOrganizationResponse.orgName ? Some(orgItem) : None(),
      store.organizations
    );
  Test.assert_with_error(
    List.size(orgList) == (1 as nat),
    "Cannot find the organization on the list"
  );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.log(Set.cardinal(org.memberRequests));
  Test.log(memberRequestsSize);
  Test.assert_with_error(
    Set.cardinal(org.memberRequests) == memberRequestsSize,
    "memberRequests size is different"
  );
  Test.assert_with_error(
    Big_map.mem(member, org.members) == shouldFindMember,
    "Problem finding member or not on the list"
  );
  return true
};

const _testRemoveMember = (
  sender: address,
  removeMember: CONTRACT.removeMemberParameters,
  shouldFindMember: bool
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(contr, RemoveMember(removeMember), 0 as mutez);
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == removeMember.orgName ? Some(orgItem) : None(),
      store.organizations
    );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.assert_with_error(
    Big_map.mem(removeMember.member, org.members) == shouldFindMember,
    "Problem finding member or not on the list"
  );
  return true
};

const _testAddAdmin = (
  sender: address,
  addAdminParameters: CONTRACT.addAdminParameters,
  adminCount: nat,
  orgCount: nat
): bool => {
  Test.set_source(sender);
  const transferStatus =
    Test.transfer_to_contract(contr, AddAdmin(addAdminParameters), 0 as mutez);
  const _ = Test.log(["transferStatus", transferStatus]);
  let store: CONTRACT.storage = Test.get_storage(taddr);
  Test.log(store);
  const orgList: list<CONTRACT.organization> =
    List.filter_map(
      (orgItem: CONTRACT.organization) =>
        orgItem.name == addAdminParameters.orgName ? Some(orgItem) : None(),
      store.organizations
    );
  const orgOpt = List.head_opt(orgList);
  Test.assert_with_error(
    Option.is_some(orgOpt),
    "Cannot extract the organization on the list"
  );
  const org = Option.unopt(orgOpt);
  Test.assert_with_error(
    Set.cardinal(org.admins) == adminCount,
    "Problem on admin size"
  );
  Test.assert_with_error(
    List.size(store.organizations) == orgCount,
    "Problem on organization size"
  );
  return true
};

// TEST SUITE
//testClaimNFT

const testClaimNFT = _testClaimNFT(user, 2 as nat);

//testAddOrganizationNotAdmin

const newOrganization: CONTRACT.addOrganizationRequest = {
  name: "Marigold",
  business: "Save Tezos",
  siteUrl: "https://",
  logoUrl: "https://",
  ipfsNftUrl: "https://",
  fundingAddress: Some("tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address),
  autoRegistration: false
};

const testAddOrganizationNotAdmin =
  _testAddOrganizationNotAdmin(
    user,
    newOrganization,
    1 as nat,
    PendingApproval()
  );

// test update organization

const testUpdateOrganization =
  _testUpdateOrganization(
    user,
    { ...newOrganization, business: "Save Tezos twice" },
    1 as nat,
    PendingApproval()
  );

const testUpdateTezosOrganizationToFail =
  _testUpdateTezosOrganizationToFail(
    user,
    { ...newOrganization, name: CONTRACT.tezosUpper },
    1 as nat,
    PendingApproval()
  );

//testActivateOrganization

const testActivateOrganization =
  _testActivateOrganization(
    tezosAdmin,
    newOrganization.name,
    1 as nat,
    Active()
  );

//requestToJoinOrganization

const user2joinRequest = { orgName: newOrganization.name, reason: "reason" };

const testRequestToJoinOrganization =
  _testRequestToJoinOrganization(user2, user2joinRequest, 1 as nat);

//responseToJoinOrganization

const userJoinOrganizationResponse = {
  membersToApprove: Set.literal(list([user2])) as set<address>,
  membersToDecline: Set.empty as set<address>,
  orgName: newOrganization.name
};

const testResponseToJoinOrganization =
  _testResponseToJoinOrganization(
    user,
    user2,
    userJoinOrganizationResponse,
    0 as nat,
    true
  );

//removeMember

const userRemoveMemberRequest = { member: user2, orgName: newOrganization.name };

const testRemoveMember = _testRemoveMember(user, userRemoveMemberRequest, false);

//testAddOrganizationNotAdmin

const newOrganization2: CONTRACT.addOrganizationRequest = {
  name: "NomadicLabs",
  business: "Save nomades",
  siteUrl: "https://",
  logoUrl: "https://",
  ipfsNftUrl: "https://",
  fundingAddress: Some("tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb" as address),
  autoRegistration: true
};

const testAddOrganizationNotAdmin2 =
  _testAddOrganizationNotAdmin(
    user2,
    newOrganization2,
    2 as nat,
    PendingApproval()
  );

//testActivateOrganization

const testActivateOrganization2 =
  _testActivateOrganization(
    tezosAdmin,
    newOrganization2.name,
    2 as nat,
    Active()
  );

//addAdmin user2 to org1

const addAdminParameters = { admin: user2, orgName: newOrganization.name };

const testAddAdmin = _testAddAdmin(user, addAdminParameters, 2 as nat, 2 as nat);
