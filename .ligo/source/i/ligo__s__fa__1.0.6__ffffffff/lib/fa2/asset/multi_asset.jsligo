// This file implement the TZIP-12 protocol (a.k.a FA2) for Multi asset on Tezos
// copyright Wulfman Corporation 2021
// Errors

#import "../common/errors.mligo" "Errors"

export type token_id = nat;

export type owner = address;

export namespace Operators {
   type operator = address;
   export type t = big_map<[owner, operator], set<token_id>>;
   // if transfer policy is Owner_or_operator_transfer

   export const assert_authorisation = (
      [operators, from_, token_id]: [t, address, nat]
   ): unit => {
      const sender_ = (Tezos.get_sender());
      if (sender_ != from_) {
         const authorized =
            match((Big_map.find_opt([from_, sender_], operators))) {
               when (Some(a)):
                  a
               when (None):
                  Set.empty
            };
         if (! (Set.mem(token_id, authorized))) {
            return failwith(Errors.not_operator)
         }
      }
   };
   // if transfer policy is Owner_transfer
   // export const assert_authorisation = ([operators, from_, token_id]: [t, address, nat]): unit => {
   //    const sender_ = Tezos.sender;
   //    if (sender_ != from_)
   //       {failwith (Errors.not_owner)}
   // }
   // if transfer policy is No_transfer
   // export const assert_authorisation = ([operators, from_, token_id]: [t, address, nat]): unit =>
   //    failwith (Errors.no_owner)

   const assert_update_permission = (owner: owner): unit =>
      assert_with_error(
         (owner == (Tezos.get_sender())),
         "The sender can only manage operators for his own token"
      );
   // For an administator
   // const admin = tz1.... ;
   // assert_with_error ((Tezos.sender = admiin), "Only administrator can manage operators")

   export const add_operator = (
      [operators, owner, operator, token_id]: [t, owner, operator, token_id]
   ): t => {
      if (owner == operator) {
         return operators
      } // assert_authorisation always allow the owner so this case is not relevant
       else {
         assert_update_permission(owner);
         let auth_tokens =
            match(Big_map.find_opt([owner, operator], operators)) {
               when (Some(ts)):
                  ts
               when (None):
                  Set.empty
            };
         auth_tokens = Set.add(token_id, auth_tokens);
         return Big_map.update([owner, operator], Some(auth_tokens), operators)
      }
   };
   export const remove_operator = (
      [operators, owner, operator, token_id]: [t, owner, operator, token_id]
   ): t => {
      if (owner == operator) {
         return operators
      } // assert_authorisation always allow the owner so this case is not relevant
       else {
         assert_update_permission(owner);
         const auth_tokens: option<set<token_id>> =
            match(Big_map.find_opt([owner, operator], operators)) {
               when (Some(toks)):
                  do {
                     const ts = Set.remove(token_id, toks);
                     if (Set.cardinal(ts) == 0n) {
                        return None()
                     } else {
                        return Some(ts)
                     }
                  }
               when (None):
                  None()
            };
         return Big_map.update([owner, operator], auth_tokens, operators)
      }
   }
};

export namespace Ledger {
   type amount_ = nat;
   export type t = big_map<[owner, token_id], amount_>;
   export const get_for_user = ([ledger, owner, token_id]: [t, owner, token_id]): nat =>
      match((Big_map.find_opt([owner, token_id], ledger))) {
         when (Some(a)):
            a
         when (None):
            0 as nat
      };
   const set_for_user = (
      [ledger, owner, token_id, amount_]: [t, owner, token_id, amount_]
   ): t =>
      Big_map.update([owner, token_id], Some(amount_), ledger);
   export const decrease_token_amount_for_user = (
      [ledger, from_, token_id, amount_]: [t, owner, token_id, amount_]
   ): t => {
      let balance_ = get_for_user([ledger, from_, token_id]);
      assert_with_error((balance_ >= amount_), Errors.ins_balance);
      balance_ = abs(balance_ - amount_);
      return set_for_user([ledger, from_, token_id, balance_])
   };
   export const increase_token_amount_for_user = (
      [ledger, to_, token_id, amount_]: [t, owner, token_id, amount_]
   ): t => {
      let balance_ = get_for_user([ledger, to_, token_id]);
      balance_ = balance_ + amount_;
      return set_for_user([ledger, to_, token_id, balance_])
   }
};

export namespace TokenMetadata {
   // This should be initialized at origination, conforming to either
   // TZIP-12 : https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md#token-metadata
   // or TZIP-16 : https://gitlab.com/tezos/tzip/-/blob/master/proposals/tzip-12/tzip-12.md#contract-metadata-tzip-016

   export type data = { token_id: nat, token_info: map<string, bytes> };
   export type t = big_map<nat, data>;
   const data1 =
      Map.literal(
         list(
            [
               ["name", bytes `FA2 multi asset 1`],
               ["symbol", bytes `FMA1`],
               ["decimals", bytes `3`]
            ]
         )
      );
   const data3 =
      Map.literal(
         list(
            [
               ["name", bytes `FA2 multi asset 3`],
               ["symbol", bytes `FMA3`],
               ["decimals", bytes `3`]
            ]
         )
      );
   export const init = (): t =>
      Big_map.literal(
         list(
            [
               [1 as nat, { token_id: 1 as nat, token_info: data1 }],
               [3 as nat, { token_id: 3 as nat, token_info: data3 }]
            ]
         )
      );
   export const get_token_metadata = ([token_id, tm]: [nat, t]): data =>
      match(Big_map.find_opt(token_id, tm)) {
         when (Some(data)):
            data
         when (None):
            failwith(Errors.undefined_token)
      }
};

#import "../common/metadata.mligo" "Metadata"

export namespace Storage {
   export type t = {
      ledger: Ledger.t,
      operators: Operators.t,
      token_metadata: TokenMetadata.t,
      metadata: Metadata.t,
      owner_token_ids: set<[owner, token_id]>,
      token_ids: set<nat>
   };
   export const assert_token_exist = ([s, token_id]: [t, nat]): unit => {
      const _ =
         Option.unopt_with_error(
            Big_map.find_opt(token_id, s.token_metadata),
            Errors.undefined_token
         )
   };
   export const set_ledger = ([s, ledger]: [t, Ledger.t]): t =>
      ({ ...s, ledger: ledger });
   export const get_operators = (s: t): Operators.t => s.operators;
   export const set_operators = ([s, operators]: [t, Operators.t]): t =>
      ({ ...s, operators: operators })
};

export type storage = Storage.t;

// Transfer entrypoint

export type atomic_trans = // @layout comb

   {
   to_: address,
   token_id: nat,
   amount: nat
};

type transfer_from = { from_: address, txs: list<atomic_trans> };

export type transfer = list<transfer_from>;

@entry
const transfer = (t: transfer, s: storage): [list<operation>, storage] => {
   // This function process the "txs" list. Since all transfer share the same "from_" address, we use a se

   const process_atomic_transfer = (from_: address) =>
      ([l, t]: [Ledger.t, atomic_trans]): Ledger.t => {
         const { to_, token_id, amount } = t;
         Storage.assert_token_exist([s, token_id]);
         Operators.assert_authorisation([s.operators, from_, token_id]);
         let ledger =
            Ledger.decrease_token_amount_for_user([l, from_, token_id, amount]);
         ledger
         = Ledger.increase_token_amount_for_user(
              [ledger, to_, token_id, amount]
           );
         return ledger
      };
   const process_single_transfer = ([l, t]: [Ledger.t, transfer_from]): Ledger.t => {
      const { from_, txs } = t;
      const ledger = List.fold_left(process_atomic_transfer(from_), l, txs);
      return ledger
   };
   const ledger = List.fold_left(process_single_transfer, s.ledger, t);
   //refresh set of owner,token_ids

   let store =
      List.fold_left(
         ([s, tf]: [storage, transfer_from]) =>
            List.fold_left(
               ([s, at]: [storage, atomic_trans]) =>
                  (
                     {
                        ...s,
                        owner_token_ids: Set.add(
                           [at.to_, at.token_id],
                           s.owner_token_ids
                        )
                     }
                  ),
               s,
               tf.txs
            ),
         s,
         t
      );
   store = Storage.set_ledger([s, ledger]);
   return [list([]), store]
};

export type request = { owner: address, token_id: nat };

type callback = // @layout comb

   {
   request,
   balance: nat
};

export type balance_of = // @layout comb

   {
   requests: list<request>,
   callback: contract<list<callback>>
};

// Balance_of entrypoint

@entry
const balance_of = (b: balance_of, s: storage): [list<operation>, storage] => {
   const { requests, callback } = b;
   const get_balance_info = (request: request): callback => {
      const { owner, token_id } = request;
      Storage.assert_token_exist([s, token_id]);
      const balance_ = Ledger.get_for_user([s.ledger, owner, token_id]);
      return ({ request: request, balance: balance_ })
   };
   const callback_param = List.map(get_balance_info, requests);
   const operation = Tezos.transaction(callback_param, 0mutez, callback);
   return [list([operation]), s]
};

// Update_operators entrypoint

export type operator = // @layout comb

   {
   owner: address,
   operator: address,
   token_id: nat
};

export type unit_update =
   ["Add_operator", operator] | ["Remove_operator", operator];

export type update_operators = list<unit_update>;

@entry
const update_operators = (updates: update_operators, s: storage): [
   list<operation>,
   storage
] => {
   const update_operator = ([operators, update]: [Operators.t, unit_update]): Operators.
   t =>
      match(update) {
         when (Add_operator(operator)):
            Operators.add_operator(
               [operators, operator.owner, operator.operator, operator.token_id]
            )
         when (Remove_operator(operator)):
            Operators.remove_operator(
               [operators, operator.owner, operator.operator, operator.token_id]
            )
      };
   let operators = Storage.get_operators(s);
   operators = List.fold_left(update_operator, operators, updates);
   const store = Storage.set_operators([s, operators]);
   return [list([]), store]
};

// If transfer_policy is  No_transfer or Owner_transfer
//const update_ops : update_operators -> storage -> operation list * storage =
//   fun (updates: update_operators) (s: storage) ->
//   const () = failwith Errors.not_supported in
//   ([]: operation list),s

@view
const all_owner_token_ids = (_: unit, s: storage): set<[address, nat]> =>
   s.owner_token_ids;

@view const all_token_ids = (_: unit, s: storage): set<nat> => s.token_ids;
