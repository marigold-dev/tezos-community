name: build and deliver to registry

on:
  push:
    branches:
      - mainnet
      - ghostnet
  workflow_dispatch: # adding the workflow_dispatch so it can be triggered manually

jobs:
  ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Set outputs
        id: vars
        run: |
          echo "::set-output name=date::$(date +%Y-%m-%dT%H-%M-%S)"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

      - uses: actions/checkout@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - run: echo "{}" > esy.json
      - run: npm ci
      - name: Prepare deployment information
        env:
          publicKey: ${{ secrets.publicKey }}
          publicKeyHash: ${{ secrets.publicKeyHash }}
          privateKey: ${{ secrets.privateKey }}
        run: |
          echo "{
            \"networkName\": \"ghostnet\",
            \"accounts\": {
                \"taqOperatorAccount\": {
                    \"publicKey\": \"$publicKey\",
                    \"publicKeyHash\": \"$publicKeyHash\",
                    \"privateKey\": \"$privateKey\"
                }
            }
          }" > .taq/config.local.testing.json

      - name: deploy main contract on ghostnet
        uses: laucans/taqueria-github-action@main
        with:
            plugins: '@taqueria/plugin-contract-types@next, @taqueria/plugin-taquito, @taqueria/plugin-ligo, @taqueria/plugin-jest'
            environment: testing
            compile_contracts: main.jsligo
            compile_plugin: ligo
            taq_ligo_image: ligolang/ligo_ci:next
            ligo_libraries: '@ligo/fa'
            test_files: test.jsligo
            deploy_contracts: main.tz

      - name: Build
        uses: docker/build-push-action@v4
        with:
          file: ./app/Dockerfile.${{ steps.vars.outputs.branch  }}
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: UI build and push version
        uses: docker/build-push-action@v4
        with:
          file: ./app/Dockerfile.${{ steps.vars.outputs.branch  }}
          context: .
          push: true
          tags: |
            ghcr.io/marigold-dev/tezos-community-ui:${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha_short }}-${{ steps.vars.outputs.branch  }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.0
      - name: Set outputs
        id: vars
        shell: bash
        run: |
          echo "::set-output name=date::$(date +%Y-%m-%dT%H-%M-%S)"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Backend build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend/Dockerfile.ghostnet
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Backend build and push version
        uses: docker/build-push-action@v4
        with:
          file: ./backend/Dockerfile.${{ steps.vars.outputs.branch  }}
          context: .
          push: true
          tags: |
            ghcr.io/marigold-dev/tezos-community-backend:${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha_short }}-${{ steps.vars.outputs.branch  }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
